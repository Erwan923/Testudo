#!/usr/bin/env python3

import subprocess
import logging
import shlex
from typing import Dict, List

class CommandExecutor:
    """Executeur de commandes sécurisé"""

    def __init__(self):
        self.logger = logging.getLogger('Testudo.Executor')
        self.allowed_commands = {
            'nmap': ['-sn', '-sS', '-sV', '-Pn', '-p-', '-T4', '--script'],
            'enum4linux': ['-a'],
            'nikto': ['-h'],
            'masscan': ['-p1-65535', '--rate'],
            'smbclient': ['-L'],
            'whois': [],
            'dig': []
        }
        
    def execute(self, command: str) -> Dict:
        """Execute une commande de manière sécurisée"""
        if not self._validate_command(command):
            return {"error": "COMMANDE_NON_AUTORISEE"}
        
        try:
            # Exécution sécurisée avec timeout
            process = subprocess.run(
                shlex.split(command),
                capture_output=True,
                text=True,
                timeout=300
            )
            
            return {
                "status": process.returncode,
                "stdout": process.stdout,
                "stderr": process.stderr,
                "command": command
            }
            
        except subprocess.TimeoutExpired:
            self.logger.error(f"Timeout pour la commande: {command}")
            return {"error": "TIMEOUT"}
            
        except Exception as e:
            self.logger.error(f"Erreur d'exécution: {str(e)}")
            return {"error": str(e)}
            
    def _validate_command(self, command: str) -> bool:
        """Vérifie que la commande est autorisée"""
        parts = shlex.split(command)
        base_command = parts[0]
        
        # Vérifie que la commande de base est autorisée
        if base_command not in self.allowed_commands:
            self.logger.warning(f"Commande non autorisée: {base_command}")
            return False
            
        # Vérifie les arguments
        allowed_args = self.allowed_commands[base_command]
        for arg in parts[1:]:
            if arg.startswith('-'):
                if not any(arg.startswith(allowed) for allowed in allowed_args):
                    self.logger.warning(f"Argument non autorisé: {arg}")
                    return False
                    
        return True

    def cleanup(self):
        """Nettoye les fichiers temporaires"""
        try:
            # Ajoutez le nettoyage des fichiers temporaires ici
            pass
        except Exception as e:
            self.logger.error(f"Erreur de nettoyage: {str(e)}")
